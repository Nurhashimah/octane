.navbar
  %ul.nav
    %li= link_to(fa_icon("print", text: (t 'actions.print')), "javascript:print()")

- provide(:title, 'Depot Fuel - Usage')
- model_class = DepotFuel
.page-header

  %h1= t 'report.depot_fuel_usage', :default => model_class.model_name.human  
  
.row-fluid
  .block
    .block-heading.tool_bar
      .col-sm-6
        = form_for :search, :url => depot_monthly_usage_depot_fuels_path, :role => "form", class: "form-inline" do |f|
          .form-group
            #datepicker.input-daterange.input-group
              .input-group-addon From
              = f.text_field :issue_date, :name => "search[start_date]" , type: "text", class: "form-control", 'data-behaviour' => 'datepicker_before', placeholder: @start_from,  value:  (@params_start_date  = params[:search].try(:[], :start_date))
              .input-group-addon To
              = f.text_field :issue_date, :name => "search[end_date]"   , type: "text", class: "form-control", 'data-behaviour' => 'datepicker_before', placeholder: @end_on,      value: (@params_end_date    = params[:search].try(:[], :end_date))
              %span.input-group-btn
                %button.btn.btn-default{:type => "submit", :style => "height:34px;"}
                  %i.glyphicon.glyphicon-search

%BR
%BR
  %h4
    - if params[:search].present? 
      - if !params[:search][:start_date].present? && !params[:search][:end_date].present?
        = t 'report.depot_usage_current'
      - else
        = t 'report.depot_usage_for'
        - if params[:search][:start_date].present? 
          = Date.parse(params[:search][:start_date]).strftime('%d-%m-%Y')
        - else
          = (Date.today.beginning_of_month).strftime('%d-%m-%Y')
        \-
        - if params[:search][:end_date].present?
          = Date.parse(params[:search][:end_date]).strftime('%d-%m-%Y')
        - else
          = (Date.today.end_of_day).strftime('%d-%m-%Y')
    - else
      = t 'report.depot_usage_current'

- fuel_types=FuelType.where(shortname: ['PETROL', 'DIESEL', 'AVTUR', 'AVCAT']).pluck(:id)  #[1,2,5,12]
- fuel_types.each do |ftype|
  - total_bal_start=0
  - total_supplieds=0
  - total_issueds=0
  - total_current=0
  - total_average=0
  =FuelType.find(ftype).name
  %table.table.table-bordered
    %thead
      %tr
        %th No
        %th= t 'depot_fuels.unit_id'
        %th= t 'depot_fuels.issue_date'
        %th= t 'depot_fuels.start_bal'
        %th= t 'depot_fuels.received' 
        %th= t 'depot_fuels.issued' 
        %th= t 'fuel_balances.current'
        %th= t 'depot_fuels.usage_average'
    %tbody
      - @monthly_usage.sort_by{|x|x.issue_date}.each_with_index do |depot_fuel, index|
        - tank_ids=FuelTank.where(fuel_type_id: ftype).where(unit_id: depot_fuel.unit_id).pluck(:id)
        - days_count=Time.days_in_month(Date.today.month, Date.today.year)
        %tr
          %td=index+1
          %td= check_kin {depot_fuel.depot.unit_details}
          %td= check_kin {l(depot_fuel.issue_date)}
          %td.right= bal_start=@last_prev_depot_fuel.fuel_balances.where(fuel_tank_id: tank_ids).sum(:current) if @last_prev_depot_fuel rescue 0
          %td.right= supplieds=depot_fuel.fuel_supplieds.where(fuel_type_id: ftype).sum(:quantity)
          %td.right= issueds=depot_fuel.fuel_issueds.where(fuel_type_id: ftype).sum(:quantity)
          %td.right= current=depot_fuel.fuel_balances.where(fuel_tank_id: tank_ids).sum(:current) 
          - average=issueds/days_count
          %td.right=number_with_precision(average, precision: 2)
          - total_bal_start+=bal_start
          - total_supplieds+=supplieds
          - total_issueds+=issueds
          - total_current+=current
          - total_average+=average
      %tr
        %th.right{colspan: 3}= (t 'depot_fuels.total').upcase
        %td.right=total_bal_start
        %td.right=total_supplieds
        %td.right=total_issueds
        %td.right=total_current
        %td.right=number_with_precision(total_average, precision: 2)



             











